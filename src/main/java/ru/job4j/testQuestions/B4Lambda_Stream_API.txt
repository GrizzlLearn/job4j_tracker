1) Что такое lambda-выражение?

Это блок кода, который передаётся в качестве параметра.
Переданный блок кода может быть вызван в любой момент времени или не вызван вообще.

---
---
2) Что такое функциональные интерфейсы?

Функциональный интерфейс - это интерфейс, который содержит только один абстрактный метод.
Абстрактный метод - это метод в котором нет реализации.

---
---
3) Перечислите функциональные интерфейсы из пакета java.util.function.

 - Supplier - (поставщик) используется для создания какого-либо объекта и при этом ему не требуется входной параметр.
    Имеет метод get().

 - Consumer (BiConsumer) - (потребитель) используется в том случае, если нам нужно применить какое-то действие
    или операцию к параметру (для BiConsumer два параметра) и при этом у метода нет возвращаемого значения.
    Имеет метод accept() в который передаётся параметром проверяемое выражение.

 - Predicate (BiPredicate) - (утверждение) используется когда необходимо проверить выражение на истинность. Возвращает
    boolean. Имеет метод test() в который передаётся параметром проверяемое выражение.

 - Function (BiFunction) - используется для преобразования входного параметра или двух параметров
    (для Bi-формы этого функционального интерфейса) в какое-либо значение, тип возвращаемого значения может не совпадать
    с типом входных параметров.
    Имеет метод apply() в который передаётся параметром проверяемое выражение.

 - UnaryOperator и BinaryOperator - это разновидность Function, в которых входные и выходные обобщенные параметры должны
    совпадать.
    Имеет метод apply() в который передаётся параметром проверяемое выражение.

Всего их 44.

---
---
4) Что такое функции высшего порядка?

Это функции зависящие от других функций, т.е. что бы вычислить основную функцию необходимо сначала вычислить вторую функцию.

---
---
5) Какие функциональные интерфейсы из пакета java.util.function поддерживают функции высшего порядка?

Все.

---

6) Что такое ссылки на методы?

Вызов метода через двойное двоеточие -> ::

имя_класса::имя_метода

---
---
7) Что такое ссылки на конструкторы?

То же самое что и ссылки на методы.

имя класса::new

---
---
8) Расскажите о зоне видимости переменных в lambda - выражениях?

 - Переменная, объявленная внутри лямбда-выражения, доступна только в самом лямбда-выражении.
 - Переменная, объявленная вне лямбда-выражения, доступна как внутри лямбда-выражения, так и вне его.

---
---
9) Как быть в ситуации, если внутри lambda - выражении операторы могут выкинуть исключение?

Не использовать лямбда-выражения с исключениями, т.к. поток данных не может прерываться.

---
---
10) Что такое Stream API?

Это новый способ работать со структурами данных в функциональном стиле.
Чаще всего с помощью stream в Java 8 работают с коллекциями, но на самом деле этот механизм может использоваться
для самых различных данных.
Более того, Stream Api позволяет решать задачу параллельно лишь изменив stream() на parallelStream()

---
---
11) Расскажите, какие шаблоны проектирования используется внутри Stream API? (Builder, Strategy, Decorator, Factory Method, Pipeline).

Нужно объяснить, где они используются в Stream API.

Используется паттерн стратегия - алгоритм выбирается во время выполнения.

---

12) Перечислите конвейерные методы Stream API.

filter - Отфильтровывает записи, возвращает только записи, соответствующие условию
skip - Позволяет пропустить N первых элементов
distinct - Возвращает стрим без дубликатов (для метода equals)
peek - Возвращает тот же стрим, но применяет функцию к каждому элементу стрима
limit - Позволяет ограничить выборку определенным количеством первых элементов
sorted - Позволяет сортировать значения либо в натуральном порядке, либо задавая Comparator
map - Преобразует каждый элемент стрима
mapToInt,
mapToDouble,
mapToLong - Аналог map, но возвращает числовой стрим (то есть стрим из числовых примитивов)
flatMap,
flatMapToInt,
flatMapToDouble,
flatMapToLong - Похоже на map, но может создавать из одного элемента несколько стримов.

---
---
13) Перечислите терминальные методы Stream API.

findFirst - Возвращает первый элемент из стрима (возвращает Optional)
findAny - Возвращает любой подходящий элемент из стрима (возвращает Optional)
collect - Представление результатов в виде коллекций и других структур данных
count - Возвращает количество элементов в стриме
anyMatch - Возвращает true, если условие выполняется хотя бы для одного элемента
noneMatch - Возвращает true, если условие не выполняется ни для одного элемента
allMatch - Возвращает true, если условие выполняется для всех элементов
min - Возвращает минимальный элемент, в качестве условия использует компаратор
max - Возвращает максимальный элемент, в качестве условия использует компаратор
forEach - Применяет функцию к каждому объекту стрима, порядок при параллельном выполнении не гарантируется
forEachOrdered - Применяет функцию к каждому объекту стрима, сохранение порядка элементов гарантирует
toArray - Возвращает массив значений стрима
reduce - Позволяет выполнять агрегатные функции над всей коллекцией и возвращать один результат

---
---
14) Что такое ленивая загрузка?

Лямбда обладает свойством отложенного выполнения.
Лямбда вычисляется, когда вызывается метод у функционального интерфейса

---
---
15) Что делает метод filter?

Отфильтровывает записи, возвращает только записи, соответствующие условию.

---
---
16) Что делает метод map.

Преобразует каждый элемент стрима.

---
---
17) Что делает метод flatMap?

Позволяет запустить второй Stream.
Принимает лямбда-выражение известное как функция (Function), которое "разворачивает" Stream-ы в один.

---
---
18) Что делает метод collect?

Представление результатов в виде коллекций и других структур данных.

---
---
19) Что делает метод reduce?

Позволяет выполнять агрегатные функции над всей коллекцией и возвращать один результат.

---
---
20) Что делает метод findFirst?

Возвращает первый элемент, который удовлетворяет требованию из стрима (возвращает Optional).

---
---
21) Возможно ли прервать выполнение потока по аналогии с break?

Да, для этого имеются специальные терминальные методы, например takeWhile.

---
---
22) Возможно ли пропустить элемент потока по аналогии с continue?

Да, можно воспользоваться методом filter

---

23) Что такое Optional?

Это контейнер объекта, который может содержать или не содержать ненулевое значение.

---

24) Перечислите методы Optional?

ifPresent - Метод позволяет выполнить какое-то действие, если объект не пустой.
isPresent - Этот метод возвращает ответ, существует ли искомый объект или нет, в виде Boolean.
Optional.of — возвращает Optional-объект
Optional.ofNullable -возвращает Optional-объект, а если нет дженерик-объекта, возвращает пустой Optional-объект
Optional.empty — возвращает пустой Optional-объект
.orElse() - Подходит для случаев, когда нам обязательно нужно получить объект, пусть даже и пустой.
.orElseThrow() - Можем получить объект или, если его нет, выбросить исключение.
.orElseGet() - Если объект не найден, Optional оставляет пространство для «Варианта Б» — можно выполнить другой метод

get() — возвращает объект, если он есть.
map() — преобразовывает объект в другой объект.
filter() — фильтрует содержащиеся объекты по предикату.
flatmap() — возвращает множество в виде стрима.

---
---
25) Расскажите про фабричные методы List.of, Set.of, Map.of?

Это методы получения списка из набора элементов.
Метод of возвращает коллекцию, которую можно прочитать, но нельзя изменять или добавлять элементы.
Удобно использовать в тестах.

---
---
26) Для чего используется ключевое слово var?

Это ключевое слово, которое упрощает создание переменных.

---
---
27) В каких случаях можно использовать var?

Его можно использовать только в сочетании с данными.

Нельзя использовать:

Поля класса
Параметры метода
Переменные без значения

---
---
