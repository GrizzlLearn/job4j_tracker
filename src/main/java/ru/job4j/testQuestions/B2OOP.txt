---
---
1. Что такое ООП?

Объектно-ориентированное программирование - это основанная на представлении программы в виде совокупности
взаимодействующих объектов, каждый из которых является экземпляром определённого
класса, а классы образуют иерархию наследования

---
---
2. Базовые концепции ООП?

Инкапсуляция, наследование, полиморфизм

---
---
3. Укажите из каких элементов состоит класс.

поля, конструкторы, методы

---
---
4. Что такое конструктор?

Это метод, который вызывается при создании нового объекта данного класса.
Если его явно не указать, при создании объекта будет вызван конструктор по умолчанию,
который не принимает никаких параметров.
Если конструктор не инициализирует значения переменных объекта, то они получают значения по умолчанию.
Можно делать больше одного конструктора, главное, что бы они отличались или типом принимаемых данных или их количеством.

---
---
5. Можно ли наследовать конструктор?

Нет.
Если нужен конструктор родителя с параметрами, необходимо использовать ключевое слово super

---
---
6. Что такое перегрузка конструктора?

Это определение нескольких конструкторов, которые принимают или разное количество параметров или их количество

---
---
7. Что такое статический метод?

Метод привязан к классу, а не к объекту класса, т.е. можно обращаться без создания объекта/экземпляра класса
Статический метод может обращаться только к статическим переменным/методам
Статический метод нельзя переопределить.
Статические методы связываются во время компиляции.

---
---
8. Что такое не статический метод?

Метод привязан к объекту класса
Что бы использовать не статический метод в статическом - нужно создать объект класса и через него обратиться к методу.
Имеет доступ как к не статическим методам и переменным, так и к статическим.

Связываются во время исполнения на реальном объекте

---
---
9. Для чего используется ключевое слово this?

Ключевое слово this представляет ссылку на текущий экземпляр класса.
Через это ключевое слово можно обращаться к переменным, методам объекта, а также вызывать его конструкторы.

---
---
10. Какой класс является базовый родительным классов для всех классов?

Все классы в Java по умолчанию наследуются от класса java.lang.Object

---
---
11. Что такое наследование? Приведите примеры из реальной жизни.

Этот механизм позволяет создавать новые классы на основании другого класса.
Класс ДВС - его потомки разные вариации исполнения
ЖК панель, замок, клавиатура

---
---
12. Опишите процесс создания нового объекта.

Obj obj = new Obj();
В момент выполнения этой строчки:
 - выделяется оперативная под объект,
 - создание и инициализация статических полей класса,
 - вызывает конструктор класса Obj,
 - выполняется инициализация полей класса,
 - переменной присваивается адрес нового объекта в памяти.

---
---
13. Как вызвать метод из родительского класса?

super

---
---
14. Что такое переопределение метода?

Изменение поведения метода родительского класса.
Объявление метода с таким же названием как и у родительского класса
@Override - говорит компилятору, что метод переопределён

---
---
15. Можно ли переопределить статический метод?

Нельзя.

---
---
16. Что такое виртуальная функция и используются ли они в Java?

из PHP

Метод (функция) класса, который может быть переопределён в классах-наследниках так,
что конкретная реализация метода для вызова будет определяться во время исполнения.

В Java нет ключевого слова virtual, но есть интерфейсы.
Методы интерфейса это и есть виртуальные функции, т.к. они переопределяются в классах реализующих интерфейс.

---
---
17. Что такое перегрузка метода?

Методы в классе с одним названием и разными параметрами, например sqrt()

---
---
18. Можно ли изменить тип возвращаемых данных при перегрузке метода?

Тип возвращаемого значения не учитывается при перегрузке методов

---
---
19. Что такое множественное наследование? Как его можно реализовать в Java.

Множественное наследование дает возможность создать класс, наследованный от нескольких суперклассов.
Есть только у интерфейсов

Реализовать можно с помощью композиции

public class ClassC{
	ClassA objA = new ClassA();
	ClassB objB = new ClassB();
	public void test(){
		objA.doSomething();
	}
	public void methodA(){
		objA.methodA();
	}
	public void methodB(){
		objB.methodB();
	}
}

---
---
20. Что такое полиморфизм? Приведите примеры из реальной жизни.

Способность функции работать с данными разных типов

 - ad-hoc - по запросу
    приведение данных к типу, перегрузка методов

 - параметрический - истинный
    может принимать в качестве параметра данные разных классов,
    если параметром функции является базовый класс, то может прийти любой наследник и быть обработан

---
---
21. Что такое инкапсуляция?

Это механизм языка, позволяющий объединить данные и методы, работающие с этими данными в единый объект,
и скрыть детали реализации от пользователя.

Этот механизм используется для скрытия реализации устройства объекта от пользователей этого класса.
Этот механизм позволяют относиться к объекту, как к атомарному(единому) элементу

---
---
22. Как реализована инкапсуляция в Java?

Реализуется через модификаторы доступа и геттеры/сеттеры

---
---
23. Можно ли применить модификаторы доступа к конструкторам?

В конструкторе допускается применение модификаторов доступа,
можно задать один из модификаторов: public, protected, private или без модификатора.

---
---
24. Что такое интерфейс?

Interface - это элемент, который содержит объявления методов, но не содержит реализации этих методов.
Интерфейс будет определять, что должен делать класс, но он не знает как.

---
---
25. Какие типы исключительных ситуаций бывают?

ArrayIndexOutOfBoundsException - Указание на индекс выходящий за пределы массива
ClassCastException - Выполнена неверная операция преобразования типов (ошибка приведения типов)
NullPointerException - Возникает при попытке обращения к полю, методу или объекту по ссылке, равной null
IllegalArgumentException - Метод вызывается с некорректными параметрами
IllegalStateException - Метод вызывается с объекта в не корректном состоянии

---
---
26. Назовите основные методы класса Object?

toString() - Возвращает строковое представление объекта.
equals(), hashCode() - Пара методов, которые используются для сравнения объектов.
getClass() - Возвращает специальный объект, который описывает текущий класс.
notify(), notifyAll(), wait() - Методы для контроля доступа к объекту из различных нитей. Управление синхронизацией нитей.
finalize() - Метод позволяет «освободить» родные не-Java ресурсы: закрыть файлы, потоки и т.д.
clone() - Метод позволяет клонировать объект: создает дубликат объекта.

---
---
27. Что такое шаблоны проектирования?

Это допускающие многократное использование оптимизированные решения проблем программирования

---
---
28. Объясните шаблон - декоратор.



---
---
29. Объясните шаблон - стратегия.

Это поведенческий шаблон. В нём выбирается план действий в зависимости от контекста
например:
класс или обновляет запись, или создаёт новую. При этом для обоих действий нужны одни и те же аргументы.

public function CreateOrUpdate(name, address, mobile, userid = null) {
    if( (userid == null) ) {
        // Это значит, что пользователь ещё не существует, надо создать новую запись
    } else {
        // Это значит, что пользователь уже существует, необходимо обновить на базе данного идентификатора пользователя
    }
}
