https://habr.com/ru/post/237043/

1. Что такое "коллекция".

Коллекции — это наборы однородных элементов. Например, страницы в книге, яблоки в корзине или люди в очереди.

---
---
1.1. Перечислите основные методы из интерфейса java.util.Collection.

Collection: базовый интерфейс для всех коллекций и других интерфейсов коллекций

boolean add (E item): добавляет в коллекцию объект item. При удачном добавлении возвращает true, при неудачном - false.

boolean addAll (Collection<? extends E> col): добавляет в коллекцию все элементы из коллекции col.
При удачном добавлении возвращает true, при неудачном - false.

void clear (): удаляет все элементы из коллекции.

boolean contains (Object item): возвращает true, если объект item содержится в коллекции, иначе возвращает false.

boolean isEmpty (): возвращает true, если коллекция пуста, иначе возвращает false.

Iterator<E> iterator (): возвращает объект Iterator для обхода элементов коллекции.

boolean remove (Object item): возвращает true, если объект item удачно удален из коллекции, иначе возвращается false.

boolean removeAll (Collection<?> col): удаляет все объекты коллекции col из текущей коллекции.
Если текущая коллекция изменилась, возвращает true, иначе возвращается false.

boolean retainAll (Collection<?> col): удаляет все объекты из текущей коллекции, кроме тех, которые содержатся
в коллекции col. Если текущая коллекция после удаления изменилась, возвращает true, иначе возвращается false.

int size (): возвращает число элементов в коллекции.

Object[] toArray (): возвращает массив, содержащий все элементы коллекции.

---
---
2. Назовите преимущества использования коллекций по сравнению с массивами.

Массивы имеют фиксированную длину, если нужно увеличить массив - создаётся новый массив большей длины.
Коллекции не имею это проблемы. Так же они реализуют различные алгоритмы и структуры данных, например:
стек, очередь, дерево и тд.

---
---
3. Какие данные могут хранить коллекции?

Любые.

---
---
4. Какие есть типы коллекций? Как они характеризуются? Расскажите про иерархию коллекций List, Set, Map.

Типы:

Queue: наследует интерфейс Collection и представляет функционал для структур данных в виде очереди

Deque: наследует интерфейс Queue и представляет функционал для двунаправленных очередей

List: наследует интерфейс Collection и представляет функциональность простых списков

Set: также расширяет интерфейс Collection и используется для хранения множеств уникальных объектов

SortedSet: расширяет интерфейс Set для создания сортированных коллекций

NavigableSet: расширяет интерфейс SortedSet для создания коллекций, в которых можно осуществлять поиск по соответствию

Map: предназначен для созданий структур данных в виде словаря, где каждый элемент имеет определенный ключ и значение.
В отличие от других интерфейсов коллекций не наследуется от интерфейса Collection

Иерархия:

На вершине иерархии в Java Collection Framework располагаются 2 интерфейса: Collection и Map.

Collection: базовый интерфейс для всех коллекций и других интерфейсов коллекций, кроме map.
Map: предназначен для созданий структур данных в виде словаря, где каждый элемент имеет определенный ключ и значение.
В отличие от других интерфейсов коллекций не наследуется от интерфейса Collection.

---
---
5. Назовите основные классы, которые имплементируют/реализуют интерфейсы List, Set, Map.

List - ArrayList, LinkedList, Vector.
Set - HashSet, LinkedHashSet. SortedSet - TreeSet.
Map - HashMap, LinkedHashMap. SortedMap - TreeMap.

---
---
6. В чём отличие ArrayList от LinkedList?

ArrayList: Строится на базе обычного массива. Если при создании не указать размерность, то под значение выделяется
10 ячеек. При попытке добавить элемент, для которого нет места, массив автоматически расширяется.
Список проиндексирован. При включении нового элемента в его середину все элементы с большим индексом сдвигаются вправо.
При удалении элемента все остальные с большим индексом сдвигаются влево.
При добавлении элементов в ArrayList (или их удалении) вызывается нативный метод System.arraycopy.
В нём используются ассемблерные инструкции для копирования блоков памяти.
Так что даже для больших массивов эти операции выполняются за приемлемое время.
Может хранить любые данные, включая null

LinkedList: Это список, в котором у каждого элемента есть ссылка на предыдущий и следующий элементы.
Благодаря этому, добавление и удаление из середины, доступ по индексу, значению происходит за линейное время O(n), а из
начала и конца за константное O(1).
Добавление и удаление элементов выполняется быстро, времязатраты не зависят от размера списка, так
как элементы при этих операциях не сдвигаются: просто перестраиваются ссылки.
Может хранить любые данные, включая null

Если добавлять и удалять элементы с произвольными индексами в списке нужно чаще, чем итерироваться по нему, то лучше
LinkedList. В остальных случаях - ArrayList.

---
---
7. В чём отличие HashSet от TreeSet?

HashSet — реализация интерфейса Set, базирующаяся на HashMap.
Внутри использует объект HashMap для хранения данных.
В качестве ключа используется добавляемый элемент, а в качестве значения — объект-пустышка (new Object()).
Из-за особенностей реализации порядок элементов не гарантируется при добавлении.
Хеш-таблица - структура данных, в которой все элементы помещаются в бакеты(buckets), соответствующие результату
вычисления хеш-функции.
Добавление, поиск и удаление элементов происходит за постоянное время, независимо от числа элементов в коллекции.

TreeSet — аналогично другим классам-реализациям интерфейса Set содержит в себе объект NavigableMap, что
и обуславливает его поведение.
Предоставляет возможность управлять порядком элементов в коллекции при помощи объекта Comparator, либо сохраняет
элементы с использованием "natural ordering".

---
---
8. В чём отличие Set от Map?

Map: каждая позиция содержит данные вида «ключ — значение».

Set: каждая позиция содержит один элемент.

Map не наследуется от интерфейса Collection.

---
---
9. Как задается порядок следования объектов в коллекции, как отсортировать коллекцию?

Порядок задается либо естественным следованием элементов (natural order), либо объектом, реализующим интерфейс сравнения Comparator.

Сортировка - в клас имплементируется интерфейс Comparable, переопределяются методы compareTo, equals, hashCode.
Реализуется нужный тип сортировки: создаётся класс, имплементируется Comparator и реализуется метод compare.
Далее Collections.sort(коллекция, компаратор);

---
---
10. Чем отличается Comparable от Comparator?

Comparable - реализуется внутри класса, определяет естественный порядок (natural order).
Comparator - реализуется вне класса. Можно реализовать различные варианты сортировки, основанные на сравнении различных полей.

---
---
11. Что такое сортировка по принципу Natural Order?

Это порядок, заданный в Comparable

 - строки - лексикографический (по алфавиту),
 - числа - числовой, знаковый или без (больше меньше),
 - дата - хронологический (по датам),
 - файл - лексикографический по имени пути
 - boolean - false < true

---
---
12. Что такое equals и hashcode?

Equals - сравнение объектов. По умолчанию этот метод выполняет внутри себя операцию “==”. Поэтому этот метод должен быть
переопределён в классе.

Hashcode - так же сравнение объектов, только по возвращаемому значению. Есть 6 методов:
0. Случайно сгенерированное число.
1. Функция адреса объекта в памяти.
2. Жёстко запрограммированное значение 1 (используется при тестировании на чувствительность (sensitivity testing)).
3. Последовательность.
4. Адрес объекта в памяти, приведённый к целочисленному значению.
5. Состояние потока, объединённое с xorshift (https://en.wikipedia.org/wiki/Xorshift)

В openJDK 8 и 9 используется 5 метод.
В openJDK 8 и 9 - 0.

---
---
13. Какие есть способы перебора всех элементов List?

for, улучшенный for, while, iterator, ListIterator, foreach, stream(поток)
---
---

14. Расскажите о методах Map.

void clear() - Удаляет все пары ключей/значений в вызываемой карте.

boolean containsKey(Object k) - Возвращает true, если вызываемая карта содержит k как ключ.
В противном случае, возвращает false.

boolean containsValue(Object v) - Возвращает true, если карта содержит v как значение.
В противном случае, возвращает false.

Set entrySet() - Возвращает набор, содержащий записи на карте. Набор содержит объекты типа Map.Entry.
Этот метод обеспечивает просмотр набора вызывающей карты.

boolean equals(Object obj) - Возвращает true, если obj является Map и содержит одинаковые записи.
В противном случае, возвращает false.

Object get(Object k) - Возвращает значение, связанное с ключом k.

int hashCode() - Возвращает хэш-код для вызываемой карты.

boolean isEmpty() - Возвращает true, если вызываемая карта пустая. В противном случае, возвращает false.

Set keySet() - Возвращает набор, который содержит ключи в вызываемой карте.
Этот метод предоставляет набор ключей на вызывающей карте.

Object put(Object k, Object v) - Вставляет запись в вызываемую карту, перезаписывая любое предыдущее
значение, связанное с ключом. Ключ и значения соответствуют k и v. Возвращает ноль, если ключ ещё не существует.
В противном случае возвращается предыдущее значение, связанное с ключом.

void putAll(Map m) - Вставляет все записи из m в эту карту.

Object remove(Object k) - Удаляет запись, чей ключ равен k.

int size() - Возвращает количество пар ключей/значений в карте.

Collection values() - Возвращает коллекцию значений в карте. Этот метод предоставляет просмотр значений в карте.

for (Map.Entry<String, String> entry : map.entrySet()) {
    String key = entry.getKey();
    String value = entry.getValue();
    System.out.println(key + " = " + value);
}

---
---
15. Расскажите, какие классы реализуют интерфейс Map?

Базовым классом для всех отображений является абстрактный класс AbstractMap, который реализует большую часть методов интерфейса Map

Hashmap, LinkedHashMap, Hashtable, TreeMap, WeakHashMap

---
---
16. Расскажите о методах map.keySet и map.entrySet? Что такое Entry?

entrySet() - возвращает коллекцию java.util.Set состоящую из объекта Map.Entry, которая сразу содержит и ключ и значение.

---
---
17. Что будет если вызвать метод map.put несколько раз с одинаковым ключом?

Значение по ключу будет перезаписано.

---
---
18. Как реализован цикл foreach?

Позволяет итерироваться по двум типам объектов:
 - массивы любого типа
 - объекты, реализующие интерфейс iterable

код:
for(String item : someList)
      System.out.println(item);

идентичен:
for (Iterator<E> i = someIterable.iterator(); i.hasNext();) {
    String item = i.next();
    System.out.println(item);
}

В цикле foreach нельзя использовать метод remove(index). Вместо этого следует использовать iterator.remove().

---
---
19. В чем разница между Iterator и Iterable?

Iterator - это интерфейс. Имеет следующие методы:
boolean hasNext() - Проверяет, есть ли еще элементы
E next() - Возвращает текущий элемент и переключается на следующий.
void remove() - Удаляет текущий элемент

Iterable - тоже интерфейс, его должны реализовывать все коллекции, которые поддерживают итератор. Имеет следующие методы:
Iterator<T>iterator() - Возвращает объект-итератор. С помощью этого метода у любой коллекции можно получить объект
итератор для обхода ее элементов.

---
---
20. Как происходит удаление элементов из ArrayList?

Для простого удаления можно использовать или индекс объекта, или ссылку на объект.
Для удаления по значению поля объекта, нужно использовать Iterator.

Iterator<Cat> catIterator = cats.iterator();//создаем итератор
while(catIterator.hasNext()) {//до тех пор, пока в списке есть элементы

   Cat nextCat = catIterator.next();//получаем следующий элемент
   if (nextCat.name.equals("Филипп Маркович")) {
       catIterator.remove();//удаляем кота с нужным именем
   }
}

Метод remove() удаляет последний элемент, который был возвращен итератором.

Если удалять через for-each будет падать исключение ConcurrentModificationException.
Связано с тем, что у коллекции есть поле modCount, которое меняется каждый раз при ее изменении, и напрямую, и через итератор.
А у итератора - поле expectedModCount, которое изменяется только при изменении коллекции через iterator.remove().

final void checkForComodification() {
    if (modCount != expectedModCount)
        throw new ConcurrentModificationException();
}

---
---
21. Как происходит удаление элементов из LinkedList?

https://habr.com/ru/post/337558/

Сначала искомый объект сравнивается по порядку со всеми элементами, сохраненными в узлах списка, начиная
с нулевого узла.
Когда найден узел, элемент которого равен искомому объекту, первым делом элемент сохраняется в отдельной переменной.
(Это нужно для методов, которые возвращают значение удалённого элемента).
Потом переопределяются ссылки соседних узлов так, чтобы они указывали друг на друга
Затем обнуляется значение узла, который содержит удаляемый объект, а также уменьшается размер коллекции.
---
---
